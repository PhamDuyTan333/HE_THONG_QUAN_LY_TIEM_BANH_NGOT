const mysql = require('mysql2/promise');
const bcrypt = require('bcryptjs');
require('dotenv').config();

async function testDatabase() {
    console.log('üîç KI·ªÇM TRA H·ªÜ TH·ªêNG C∆† S·ªû D·ªÆ LI·ªÜU\n');
    
    // 1. Ki·ªÉm tra c·∫•u h√¨nh m√¥i tr∆∞·ªùng
    console.log('üìã C·∫•u h√¨nh m√¥i tr∆∞·ªùng:');
    console.log(`DB_HOST: ${process.env.DB_HOST || 'localhost'}`);
    console.log(`DB_USER: ${process.env.DB_USER || 'myuser'}`);
    console.log(`DB_PASSWORD: ${process.env.DB_PASSWORD || 'mypassword'}`);
    console.log(`DB_NAME: ${process.env.DB_NAME || 'MXHSV'}`);
    console.log(`JWT_SECRET: ${process.env.JWT_SECRET ? 'ƒê√£ c·∫•u h√¨nh' : '‚ùå CH∆ØA C·∫§U H√åNH'}`);
    console.log(`JWT_EXPIRES_IN: ${process.env.JWT_EXPIRES_IN || '1d'}\n`);
    
    let connection;
    
    try {
        // 2. Test k·∫øt n·ªëi database
        console.log('üîå ƒêang ki·ªÉm tra k·∫øt n·ªëi database...');
        connection = await mysql.createConnection({
            host: process.env.DB_HOST || 'localhost',
            user: process.env.DB_USER || 'myuser',
            password: process.env.DB_PASSWORD || 'mypassword',
            database: process.env.DB_NAME || 'MXHSV',
            port: process.env.DB_PORT || 3309
        });
        
        console.log('‚úÖ K·∫øt n·ªëi database th√†nh c√¥ng!\n');
        
        // 3. Ki·ªÉm tra b·∫£ng accounts
        console.log('üìä Ki·ªÉm tra b·∫£ng accounts...');
        const [tables] = await connection.execute("SHOW TABLES LIKE 'accounts'");
        
        if (tables.length === 0) {
            console.log('‚ùå B·∫£ng accounts kh√¥ng t·ªìn t·∫°i!');
            console.log('üí° H√£y ch·∫°y file init.sql ƒë·ªÉ t·∫°o b·∫£ng');
            return;
        }
        
        console.log('‚úÖ B·∫£ng accounts t·ªìn t·∫°i');
        
        // 4. Ki·ªÉm tra c·∫•u tr√∫c b·∫£ng
        console.log('\nüèóÔ∏è C·∫•u tr√∫c b·∫£ng accounts:');
        const [columns] = await connection.execute("DESCRIBE accounts");
        columns.forEach(col => {
            console.log(`- ${col.Field}: ${col.Type} ${col.Null === 'NO' ? '(NOT NULL)' : ''} ${col.Key ? `(${col.Key})` : ''}`);
        });
        
        // 5. Ki·ªÉm tra d·ªØ li·ªáu
        console.log('\nüë• D·ªØ li·ªáu t√†i kho·∫£n:');
        const [accounts] = await connection.execute('SELECT id, username, email, role, status FROM accounts');
        
        if (accounts.length === 0) {
            console.log('‚ùå Kh√¥ng c√≥ t√†i kho·∫£n n√†o trong database!');
            console.log('üí° H√£y ch·∫°y file init.sql ƒë·ªÉ th√™m d·ªØ li·ªáu m·∫´u');
            return;
        }
        
        accounts.forEach(acc => {
            console.log(`- ID: ${acc.id}, Username: ${acc.username}, Email: ${acc.email}, Role: ${acc.role}, Status: ${acc.status}`);
        });
        
        // 6. Test m·∫≠t kh·∫©u
        console.log('\nüîê Ki·ªÉm tra m·∫≠t kh·∫©u:');
        const [adminAccount] = await connection.execute('SELECT * FROM accounts WHERE username = ?', ['admin']);
        
        if (adminAccount.length > 0) {
            const admin = adminAccount[0];
            console.log(`Admin hash: ${admin.password.substring(0, 20)}...`);
            
            // Test c√°c m·∫≠t kh·∫©u c√≥ th·ªÉ
            const testPasswords = ['admin123', 'admin', '1234526', 'password'];
            
            for (const pwd of testPasswords) {
                try {
                    const isMatch = await bcrypt.compare(pwd, admin.password);
                    console.log(`"${pwd}": ${isMatch ? '‚úÖ ƒê√öNG' : '‚ùå SAI'}`);
                } catch (error) {
                    console.log(`"${pwd}": ‚ùå L·ªñI - ${error.message}`);
                }
            }
        }
        
        // 7. Test JWT
        console.log('\nüé´ Ki·ªÉm tra JWT:');
        const jwt = require('jsonwebtoken');
        
        if (!process.env.JWT_SECRET) {
            console.log('‚ùå JWT_SECRET ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh!');
        } else {
            try {
                const testToken = jwt.sign({ test: 'data' }, process.env.JWT_SECRET, { expiresIn: '1h' });
                const decoded = jwt.verify(testToken, process.env.JWT_SECRET);
                console.log('‚úÖ JWT ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng');
            } catch (error) {
                console.log(`‚ùå JWT l·ªói: ${error.message}`);
            }
        }
        
        console.log('\nüéâ KI·ªÇM TRA HO√ÄN T·∫§T!');
        
    } catch (error) {
        console.error('‚ùå L·ªñI K·∫æT N·ªêI DATABASE:', error.message);
        
        if (error.code === 'ECONNREFUSED') {
            console.log('\nüí° G·ª£i √Ω kh·∫Øc ph·ª•c:');
            console.log('1. Ki·ªÉm tra MySQL c√≥ ƒëang ch·∫°y kh√¥ng');
            console.log('2. N·∫øu d√πng Docker: docker-compose up -d');
            console.log('3. Ki·ªÉm tra port 3309 c√≥ b·ªã chi·∫øm kh√¥ng');
            console.log('4. Ki·ªÉm tra firewall/antivirus');
        } else if (error.code === 'ER_ACCESS_DENIED_ERROR') {
            console.log('\nüí° L·ªói x√°c th·ª±c:');
            console.log('1. Ki·ªÉm tra username/password trong .env');
            console.log('2. Ki·ªÉm tra quy·ªÅn user trong MySQL');
        } else if (error.code === 'ER_BAD_DB_ERROR') {
            console.log('\nüí° Database kh√¥ng t·ªìn t·∫°i:');
            console.log('1. T·∫°o database MXHSV trong MySQL');
            console.log('2. Ch·∫°y file init.sql');
        }
        
    } finally {
        if (connection) {
            await connection.end();
            console.log('\nüîå ƒê√£ ƒë√≥ng k·∫øt n·ªëi database');
        }
    }
}

// Ch·∫°y test
testDatabase();
