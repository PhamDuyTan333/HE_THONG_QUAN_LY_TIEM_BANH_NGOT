const bcrypt = require('bcryptjs');

async function generateCorrectHashes() {
    console.log('üîê T·∫°o hash m·∫≠t kh·∫©u ch√≠nh x√°c...\n');
    
    // T·∫°o hash cho m·∫≠t kh·∫©u "1234526" (theo comment trong init.sql)
    const hash1234526 = await bcrypt.hash('1234526', 10);
    console.log('Hash cho "1234526":', hash1234526);
    
    // T·∫°o hash cho c√°c m·∫≠t kh·∫©u m·ªõi
    const hashAdmin123 = await bcrypt.hash('admin123', 10);
    const hashQuanly123 = await bcrypt.hash('quanly123', 10);
    const hashNhanvien123 = await bcrypt.hash('nhanvien123', 10);
    
    console.log('\nüìù Hash m·∫≠t kh·∫©u m·ªõi:');
    console.log('admin123:', hashAdmin123);
    console.log('quanly123:', hashQuanly123);
    console.log('nhanvien123:', hashNhanvien123);
    
    // Test hash hi·ªán t·∫°i trong database
    const currentHash = '$2a$10$5W9SeGp3j9h.QdAYZ1qUO.XXJgvdRPZRhBl6MRekU0wHLpYyIHEMO';
    
    console.log('\nüß™ Ki·ªÉm tra hash hi·ªán t·∫°i v·ªõi c√°c m·∫≠t kh·∫©u kh√°c:');
    const testPasswords = ['', ' ', 'null', 'undefined', '0', 'admin', 'password', '12345', '123456789'];
    
    for (const pwd of testPasswords) {
        try {
            const isMatch = await bcrypt.compare(pwd, currentHash);
            if (isMatch) {
                console.log(`‚úÖ T√åM TH·∫§Y: "${pwd}" kh·ªõp v·ªõi hash hi·ªán t·∫°i!`);
            }
        } catch (error) {
            // B·ªè qua l·ªói
        }
    }
    
    console.log('\nüí° G·ª£i √Ω gi·∫£i quy·∫øt:');
    console.log('1. C·∫≠p nh·∫≠t file init.sql v·ªõi hash m·ªõi');
    console.log('2. Ho·∫∑c ch·∫°y script reset_passwords.js khi database ƒë√£ ch·∫°y');
    console.log('3. Ho·∫∑c s·ª≠ d·ª•ng m·∫≠t kh·∫©u ch√≠nh x√°c n·∫øu t√¨m ƒë∆∞·ª£c');
}

generateCorrectHashes();
